Write a function that searches a list of names (unsorted) for the name "Bob" and returns the location in the list. If Bob is not in the array, return -1.

Examples:

csWhereIsBob(["Jimmy", "Layla", "Bob"]) ➞ 2
csWhereIsBob(["Bob", "Layla", "Kaitlyn", "Patricia"]) ➞ 0
csWhereIsBob(["Jimmy", "Layla", "James"]) ➞ -1
Notes:

Assume all names start with a capital letter and are lowercase thereafter (i.e. don't worry about finding "BOB" or "bob").

********** CODE ************

def csWhereIsBob(names):
    bob = "Bob"
    if bob in names:
        return names.index(bob)
    else:
        return -1
        
*********** CODE ***************

Create a function that returns True if the given string has any of the following:

Only letters and no numbers.
Only numbers and no letters.
If a string has both numbers and letters or contains characters that don't fit into any category, return False.

Examples:

csAlphanumericRestriction("Bold") ➞ True
csAlphanumericRestriction("123454321") ➞ True
csAlphanumericRestriction("H3LL0") ➞ False
Notes:

Any string that contains spaces or is empty should return False.

*********** CODE ***************

def csAlphanumericRestriction(input_str):
    if input_str.isalpha() or input_str.isdigit():
        return True
    else:
        return False

*********** CODE ***************

Write a function that takes a string as input and returns that string in reverse order, with the opposite casing for each character within the string.

Examples:

csOppositeReverse("Hello World") ➞ "DLROw OLLEh"
csOppositeReverse("ReVeRsE") ➞ "eSrEvEr"
csOppositeReverse("Radar") ➞ "RADAr"
Notes:

The input string will only contain alpha characters.

*********** CODE ***************

def csOppositeReverse(txt):
    a = txt[::-1]
    return a.swapcase()

*********** CODE ***************

Create a function that given an integer, returns an integer where every digit in the input integer is squared.

Examples:

csSquareAllDigits(9119) -> 811181 because 9^2 = 81, 1^2 = 1, 1^2 = 1, and 9^2 = 81
csSquareAllDigits(2483) -> 416649 because 2^2 = 4, 4^2 = 16, 8^2 = 64, and 3^2 = 9

*********** CODE ***************

def csSquareAllDigits(n):
    res = ""
    for ch in str(n):
        res = res + str(int(ch)**2)
    return int(res)

*********** CODE ***************

Imagine a school that children attend for years. In each year, there are a certain number of groups started, marked with the letters. So if years = 7 and groups = 4For the first year, the groups are 1a, 1b, 1c, 1d, and for the last year, the groups are 7a, 7b, 7c, 7d.

Write a function that returns the groups in the school by year (as a string), separated with a comma and space in the form of "1a, 1b, 1c, 1d, 2a, 2b (....) 6d, 7a, 7b, 7c, 7d".

Examples:

csSchoolYearsAndGroups(years = 7, groups = 4) ➞ "1a, 1b, 1c, 1d, 2a, 2b, 2c, 2d, 3a, 3b, 3c, 3d, 4a, 4b, 4c, 4d, 5a, 5b, 5c, 5d, 6a, 6b, 6c, 6d, 7a, 7b, 7c, 7d"
Notes:

1 <= years <= 10
1 <= groups <=26

*********** CODE ***************

def csSchoolYearsAndGroups(years, groups):
    my_list = []
    for x in range(years):
        x += 1
        x_iteration = str(x)
        letter = ord("a")
        for y in range(groups):
            y += 1
            y_iteration = chr(letter)
            xy_iteration = x_iteration + y_iteration
            my_list.append(xy_iteration)
            letter += 1
    return ", ".join(map(str, my_list))

*********** CODE ***************

Create a function that concatenates the number 7 to the end of every chord in a list. If a chord already ends with a 7, do not add another 7.

Examples:

csMakeItJazzy(["G", "F", "C"]) ➞ ["G7", "F7", "C7"]
csMakeItJazzy(["G", "F7", "C"]) ➞ ["G7", "F7", "C7"]
csMakeItJazzy(["Dm", "G", "E", "A"]) ➞ ["Dm7", "G7", "E7", "A7"]
csMakeItJazzy(["F7", "E7", "A7", "Ab7", "Gm7", "C7"]) ➞ ["F7", "E7", "A7", "Ab7", "Gm7", "C7"]
csMakeItJazzy([]) ➞ []
Notes:

Return an empty list if the given list is empty.
You can expect all the tests to have valid chords.

*********** CODE ***************

def csMakeItJazzy(chords):
    if not chords:
        return chords
    else:
      i = 0
      for chord in chords:
        last = chord[-1]
        if ord(last) == 55:
          pass
        else:
            new_chord = chord + str(7)
            chords[i] = new_chord
        i += 1
    return(chords)

*********** CODE ***************

Given a string, return a new string with all the vowels removed.

Examples:

csRemoveTheVowels("Lambda School is awesome!") -> "Lmbd Schl s wsm!"
Notes:

For this challenge, "y" is not considered a vowel.
[execution time limit] 4 seconds (py3)

[input] string input_str

[output] string

[Python 3] Syntax Tips

# Prints help message to the console
# Returns a string
def helloWorld(name):
    print "This prints to the console when you Run Tests"
    return "Hello, " + name

*********** CODE ***************

def csRemoveTheVowels(input_str):
    vowels = ("A", "a", "E", "e", "I", "i", "O", "o", "U", "u")
    for x in input_str:
        if x in vowels:
            input_str = input_str.replace(x, "")
    return input_str

*********** CODE ***************

Given a start integer and an ending integer (both inclusive), write a function that returns the count (not the sum) of all integers in the range (except integers that contain the digit 5).

Examples:

csAnythingButFive(1, 5) -> 1, 2, 3, 4, -> 4 (there are 4 integers in the range that do not contain the digit 5)
csAnythingButFive(1, 9) -> 1, 2, 3, 4, 6, 7, 8, 9 -> 8
csAnythingButFive(4, 17) -> 4,6,7,8,9,10,11,12,13,14,16,17 -> 12
Notes:

The output can contain the digit 5.
The start number will always be less than the end number (both numbers can also be negative).

*********** CODE ***************

def csAnythingButFive(start, end):
    x = range(start, end + 1)
    counter = 0
    for i in x:
        if "5" not in str(i):
            counter += 1
    return counter

*********** CODE ***************

Given an array of integers, return the sum of all the positive integers in the array.

Examples:

csSumOfPositive([1, 2, 3, -4, 5]) -> 1 + 2 + 3 + 5 = 11
csSumOfPositive([-3, -2, -1, 0, 1]) -> 1
csSumOfPositive([-3, -2]) -> 0
Notes:

If the input_arr does not contain any positive integers, the default sum should be 0.

*********** CODE ***************

def csSumOfPositive(input_arr):
    runningTotal = 0
    for x in input_arr:
        if x > 0:
            runningTotal = runningTotal + x
    return runningTotal

*********** CODE ***************

Given a string of words, return the length of the shortest word(s).

Notes:

The input string will never be empty and you do not need to validate for different data types.

*********** CODE ***************

def csShortestWord(input_str):
    x = list(map(len, input_str.split()))
    return min(x)

*********** CODE ***************
