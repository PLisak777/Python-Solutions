Write a function that searches a list of names (unsorted) for the name "Bob" and returns the location in the list. If Bob is not in the array, return -1.

Examples:

csWhereIsBob(["Jimmy", "Layla", "Bob"]) ➞ 2
csWhereIsBob(["Bob", "Layla", "Kaitlyn", "Patricia"]) ➞ 0
csWhereIsBob(["Jimmy", "Layla", "James"]) ➞ -1
Notes:

Assume all names start with a capital letter and are lowercase thereafter (i.e. don't worry about finding "BOB" or "bob").

********** CODE ************

def csWhereIsBob(names):
    bob = "Bob"
    if bob in names:
        return names.index(bob)
    else:
        return -1
        
*********** CODE ***************

Create a function that returns True if the given string has any of the following:

Only letters and no numbers.
Only numbers and no letters.
If a string has both numbers and letters or contains characters that don't fit into any category, return False.

Examples:

csAlphanumericRestriction("Bold") ➞ True
csAlphanumericRestriction("123454321") ➞ True
csAlphanumericRestriction("H3LL0") ➞ False
Notes:

Any string that contains spaces or is empty should return False.

*********** CODE ***************

def csAlphanumericRestriction(input_str):
    if input_str.isalpha() or input_str.isdigit():
        return True
    else:
        return False

*********** CODE ***************

Write a function that takes a string as input and returns that string in reverse order, with the opposite casing for each character within the string.

Examples:

csOppositeReverse("Hello World") ➞ "DLROw OLLEh"
csOppositeReverse("ReVeRsE") ➞ "eSrEvEr"
csOppositeReverse("Radar") ➞ "RADAr"
Notes:

The input string will only contain alpha characters.

*********** CODE ***************

def csOppositeReverse(txt):
    a = txt[::-1]
    return a.swapcase()

*********** CODE ***************

Create a function that given an integer, returns an integer where every digit in the input integer is squared.

Examples:

csSquareAllDigits(9119) -> 811181 because 9^2 = 81, 1^2 = 1, 1^2 = 1, and 9^2 = 81
csSquareAllDigits(2483) -> 416649 because 2^2 = 4, 4^2 = 16, 8^2 = 64, and 3^2 = 9

*********** CODE ***************

def csSquareAllDigits(n):
    res = ""
    for ch in str(n):
        res = res + str(int(ch)**2)
    return int(res)

*********** CODE ***************

Imagine a school that children attend for years. In each year, there are a certain number of groups started, marked with the letters. So if years = 7 and groups = 4For the first year, the groups are 1a, 1b, 1c, 1d, and for the last year, the groups are 7a, 7b, 7c, 7d.

Write a function that returns the groups in the school by year (as a string), separated with a comma and space in the form of "1a, 1b, 1c, 1d, 2a, 2b (....) 6d, 7a, 7b, 7c, 7d".

Examples:

csSchoolYearsAndGroups(years = 7, groups = 4) ➞ "1a, 1b, 1c, 1d, 2a, 2b, 2c, 2d, 3a, 3b, 3c, 3d, 4a, 4b, 4c, 4d, 5a, 5b, 5c, 5d, 6a, 6b, 6c, 6d, 7a, 7b, 7c, 7d"
Notes:

1 <= years <= 10
1 <= groups <=26

*********** CODE ***************

def csSchoolYearsAndGroups(years, groups):
    my_list = []
    for x in range(years):
        x += 1
        x_iteration = str(x)
        letter = ord("a")
        for y in range(groups):
            y += 1
            y_iteration = chr(letter)
            xy_iteration = x_iteration + y_iteration
            my_list.append(xy_iteration)
            letter += 1
    return ", ".join(map(str, my_list))

*********** CODE ***************

Create a function that concatenates the number 7 to the end of every chord in a list. If a chord already ends with a 7, do not add another 7.

Examples:

csMakeItJazzy(["G", "F", "C"]) ➞ ["G7", "F7", "C7"]
csMakeItJazzy(["G", "F7", "C"]) ➞ ["G7", "F7", "C7"]
csMakeItJazzy(["Dm", "G", "E", "A"]) ➞ ["Dm7", "G7", "E7", "A7"]
csMakeItJazzy(["F7", "E7", "A7", "Ab7", "Gm7", "C7"]) ➞ ["F7", "E7", "A7", "Ab7", "Gm7", "C7"]
csMakeItJazzy([]) ➞ []
Notes:

Return an empty list if the given list is empty.
You can expect all the tests to have valid chords.

*********** CODE ***************

def csMakeItJazzy(chords):
    if not chords:
        return chords
    else:
      i = 0
      for chord in chords:
        last = chord[-1]
        if ord(last) == 55:
          pass
        else:
            new_chord = chord + str(7)
            chords[i] = new_chord
        i += 1
    return(chords)

*********** CODE ***************

Given a string, return a new string with all the vowels removed.

Examples:

csRemoveTheVowels("Lambda School is awesome!") -> "Lmbd Schl s wsm!"
Notes:

For this challenge, "y" is not considered a vowel.
[execution time limit] 4 seconds (py3)

[input] string input_str

[output] string

[Python 3] Syntax Tips

# Prints help message to the console
# Returns a string
def helloWorld(name):
    print "This prints to the console when you Run Tests"
    return "Hello, " + name

*********** CODE ***************

def csRemoveTheVowels(input_str):
    vowels = ("A", "a", "E", "e", "I", "i", "O", "o", "U", "u")
    for x in input_str:
        if x in vowels:
            input_str = input_str.replace(x, "")
    return input_str

*********** CODE ***************

Given a start integer and an ending integer (both inclusive), write a function that returns the count (not the sum) of all integers in the range (except integers that contain the digit 5).

Examples:

csAnythingButFive(1, 5) -> 1, 2, 3, 4, -> 4 (there are 4 integers in the range that do not contain the digit 5)
csAnythingButFive(1, 9) -> 1, 2, 3, 4, 6, 7, 8, 9 -> 8
csAnythingButFive(4, 17) -> 4,6,7,8,9,10,11,12,13,14,16,17 -> 12
Notes:

The output can contain the digit 5.
The start number will always be less than the end number (both numbers can also be negative).

*********** CODE ***************

def csAnythingButFive(start, end):
    x = range(start, end + 1)
    counter = 0
    for i in x:
        if "5" not in str(i):
            counter += 1
    return counter

*********** CODE ***************

Given an array of integers, return the sum of all the positive integers in the array.

Examples:

csSumOfPositive([1, 2, 3, -4, 5]) -> 1 + 2 + 3 + 5 = 11
csSumOfPositive([-3, -2, -1, 0, 1]) -> 1
csSumOfPositive([-3, -2]) -> 0
Notes:

If the input_arr does not contain any positive integers, the default sum should be 0.

*********** CODE ***************

def csSumOfPositive(input_arr):
    runningTotal = 0
    for x in input_arr:
        if x > 0:
            runningTotal = runningTotal + x
    return runningTotal

*********** CODE ***************

Given a string of words, return the length of the shortest word(s).

Notes:

The input string will never be empty and you do not need to validate for different data types.

*********** CODE ***************

def csShortestWord(input_str):
    x = list(map(len, input_str.split()))
    return min(x)

*********** CODE ***************

Given a sorted array (in ascending order) of integers and a target, write a function that finds the two integers that add up to the target.

Examples:

csSortedTwoSum([3,8,12,16], 11) -> [0,1]
csSortedTwoSum([3,4,5], 8) -> [0,2]
csSortedTwoSum([0,1], 1) -> [0,1]
Notes:

Each input will have exactly one solution.
You may not use the same element twice.

*********** CODE ***************

def csSortedTwoSum(numbers, target):
    for i in range(len(numbers) - 1):
        for j in range(i + 1, len(numbers)):
            if numbers[i] + numbers[j] == target:
                return [i, j]

*********** CODE ***************

You are given two strings, str_1 and str_2, where str_2 is generated by randomly shuffling str_1 and then adding one letter at a random position.

Write a function that returns the letter that was added to str_2.

Examples:

csFindAddedLetter(str_1 = "bcde", str_2 = "bcdef") -> "f"
csFindAddedLetter(str_1 = "", str_2 = "z") -> "z"
csFindAddedLetter(str_1 = "b", str_2 = "bb") -> "b"
csFindAddedLetter(str_1 = "bf", str_2 = "bfb") -> "b"
Notes:

str_1 and str_2 both consist of only lowercase alpha characters.

*********** CODE ***************

def csFindAddedLetter(str_1, str_2):
    i = list(str_1)
    j = list(str_2)
    
    j.sort()
    for x in i:
        j.remove(x)
    return "".join(j)

*********** CODE ***************

Given a string, write a function that returns the index of the first unique (non-repeating) character. If there isn't a unique (non-repeating) character, return -1.

Examples:

csFirstUniqueChar(input_str = "lambdaschool") -> 2
csFirstUniqueChar(input_str = "ilovelambdaschool") -> 0
csFirstUniqueChar(input_str = "vvv") -> -1
Notes:

input_str will only contain lowercase alpha characters.

*********** CODE ***************

def csFirstUniqueChar(input_str):
    orig = list(input_str)
    seen = []
    
    for i, j in enumerate(input_str):
        orig = orig[1:]
        if j not in orig and j not in seen:
            return i
        seen.append(input_str[i])
    return -1

*********** CODE ***************

Given two strings that include only lowercase alpha characters, str_1 and str_2, write a function that returns a new sorted string that contains any character (only once) that appeared in str_1 or str_2.

Examples:

csLongestPossible("aabbbcccdef", "xxyyzzz") -> "abcdefxyz"
csLongestPossible("abc", "abc") -> "abc"

*********** CODE ***************

def csLongestPossible(str_1, str_2):
    new_str = []
    for i in str_1:
        if i not in new_str:
            new_str.append(i)
    for j in str_2:
        if j not in new_str:
            new_str.append(j)
    new_str.sort()
    listToString = "".join(map(str, new_str))
    return listToString

*********** CODE ***************

You are given the prices of a stock, in the form of an array of integers, prices. Let's say that prices[i] is the price of the stock on the ith day (0-based index). Assuming that you are allowed to buy and sell the stock only once, your task is to find the maximum possible profit (the difference between the buy and sell prices).

Note: You can assume there are no fees associated with buying or selling the stock.

Example

For prices = [6, 3, 1, 2, 5, 4], the output should be buyAndSellStock(prices) = 4.

It would be most profitable to buy the stock on day 2 and sell it on day 4. Thus, the maximum profit is prices[4] - prices[2] = 5 - 1 = 4.

For prices = [8, 5, 3, 1], the output should be buyAndSellStock(prices) = 0.

Since the value of the stock drops each day, there's no way to make a profit from selling it. Hence, the maximum profit is 0.

For prices = [3, 100, 1, 97], the output should be buyAndSellStock(prices) = 97.

It would be most profitable to buy the stock on day 0 and sell it on day 1. Thus, the maximum profit is prices[1] - prices[0] = 100 - 3 = 97.

*********** CODE ***************

def buyAndSellStock(prices):
    minSell = 0
    maxSell = 1
    minBuy = 0
    maxProfit = 0
    
    if len(prices) > 2:    
        for i, j in enumerate(prices):
            if (prices[i] < prices[minBuy]):
                minBuy = i
            if (prices[maxSell] - prices[minSell] < prices[i] - prices[minBuy]):
                maxSell = i
                minSell = minBuy
        
        maxProfit = prices[maxSell] - prices[minSell]
    return maxProfit

*********** CODE ***************

Given a string, your task is to replace each of its characters by the next one in the English alphabet; i.e. replace a with b, replace b with c, etc (z would be replaced by a).

Example

For inputString = "crazy", the output should be alphabeticShift(inputString) = "dsbaz".

*********** CODE ***************

def alphabeticShift(inputString):
    a=ord('a')
    alph=[chr(i) for i in range(a, a+26)]
    str_list = list(inputString)
    new_arr = []
    
    for l in str_list:
        if l in alph and l != "z":
            inx = alph.index(l, 0, 27)
            nextLetter = alph[inx + 1]
            new_arr.append(nextLetter)
        else:
            new_arr.append(alph[0])
        answer = "".join(new_arr)
    return answer

*********** CODE ***************

You are given a parentheses sequence, check if it's regular.

Example

For s = "()()(())", the output should be
validParenthesesSequence(s) = true;
For s = "()()())", the output should be
validParenthesesSequence(s) = false.

*********** CODE ***************

def validParenthesesSequence(s):
    openList = ["("]
    closedList = [")"]
    newList = []
    
    for i in s:
        if i in openList:
            newList.append(i)
        elif i in closedList:
            pos = closedList.index(i)
            if ((len(newList) > 0) and 
                (openList[pos] == newList[len(newList) - 1])):
                newList.pop()
            else:
                return False
    if len(newList) == 0:
        return True
    else:
        return False  

*********** CODE ***************

Given a string (the input will be in the form of an array of characters), write a function that returns the reverse of the given string.

Examples:

csReverseString(["l", "a", "m", "b", "d", "a"]) -> ["a", "d", "b", "m", "a", "l"]
csReverseString(["I", "'", "m", " ", "a", "w", "e", "s", "o", "m", "e"]) -> ["e", "m", "o", "s", "e", "w", "a", " ", "m", "'", "I"]

*********** CODE ***************

def csReverseString(chars):
    reversedString = chars[::-1]
    return reversedString

*********** CODE ***************

A palindrome is a word, phrase, number, or another sequence of characters that reads the same backward or forward. This includes capital letters, punctuation, and other special characters.

Given a string, write a function that checks if the input is a valid palindrome.

Examples:

csCheckPalindrome("racecar") -> true
csCheckPalindrome("anna") -> true
csCheckPalindrome("12345") -> false
csCheckPalindrome("12321") -> true

*********** CODE ***************

def csCheckPalindrome(input_str):
    return input_str == input_str[::-1]
    
            ***OR***
            
def csCheckPalindrome(input_str):
    firstChar = 0
    lastChar = len(input_str) - 1
    isPalindrome = True
    for i in range(len(input_str)) :
        firstChar = firstPos(input_str, firstChar, lastChar);
        lastChar = lastPos(input_str, lastChar, firstChar);
        if (lastChar < 0 or firstChar < 0):
            break
        if (input_str[firstChar] == input_str[lastChar]):
            firstChar += 1
            lastChar -= 1
            continue
        isPalindrome = False
        break  
    return isPalindrome
    
# Helper function to get the position of first character in the string
def firstPos(input_str, start, end):
    firstChar = -1
    for i in range(start, end + 1):
        if (input_str[i] >= 'a' and input_str[i] <= 'z') :
            firstChar = i
            break  
    return firstChar

# Helper function to get the position of last character in the string
def lastPos(input_str, start, end):  
    lastChar = -1  
    for i in range(start, end - 1, -1) :
        if (input_str[i] >= 'a' and input_str[i] <= 'z') :
            lastChar = i
            break  
    return lastChar

*********** CODE ***************

Given a string, write a function that removes all duplicate words from the input. The string that you return should only contain the first occurrence of each word in the string.

Examples:

`csRemoveDuplicateWords("alpha bravo bravo golf golf golf delta alpha bravo bravo golf golf golf delta") -> "alpha bravo golf delta"
`csRemoveDuplicateWords("my dog is my dog is super smart") -> "my dog is super smart"

*********** CODE ***************

def csRemoveDuplicateWords(input_str):
    input_str = input_str.split()
    unique = []
    
    for word in input_str:
        if word not in unique:
            unique.append(word)
    input_str = " ".join(unique)
    
    return input_str

*********** CODE ***************
Given an integer, write a function that reverses the bits (in binary) and returns the integer result.

Examples:

csReverseIntegerBits(417) -> 267
417 in binary is 110100001. Reversing the binary is 100001011, which is 267 in decimal.
csReverseIntegerBits(267) -> 417
csReverseIntegerBits(0) -> 0

Notes:
The input integer will not be negative.
*********** CODE ***************

def csReverseIntegerBits(n):
    reversed = 0
    while(n > 0):
        reversed = reversed << 1
        if ( n & 1 == 1):
            reversed = reversed ^ 1
        n = n >> 1
    return reversed

*********** CODE ***************
Given a binary string (ASCII encoded), write a function that returns the equivalent decoded text.

Every eight bits in the binary string represents one character on the ASCII table.

Examples:
csBinaryToASCII("011011000110000101101101011000100110010001100001") -> "lambda"
01101100 -> 108 -> "l"
01100001 -> 97 -> "a"
01101101 -> 109 -> "m"
01100010 -> 98 -> "b"
01100100 -> 100 -> "d"
01100001 -> 97 -> "a"
csBinaryToASCII("") -> ""

Notes:
The input string will always be a valid binary string.
Characters can be in the range from "00000000" to "11111111" (inclusive).
In the case of an empty input string, your function should return an empty string.
*********** CODE ***************

def csBinaryToASCII(binary):
    binary_letters = []
    letters = ''
    if binary == "":
        return ""
    for index in range(0, len(binary), 8):
        binary_letters.append(binary[index : index + 8])
    for string in binary_letters:
        binary_int = v = chr(int(string, 2))
        letters += binary_int
    return letters

*********** CODE ***************
Given a number, write a function that converts that number into a string that contains "raindrop sounds" corresponding to certain potential factors. A factor is a number that evenly divides into another number, leaving no remainder. The simplest way to test if one number is a factor of another is to use the modulo operator.

Here are the rules for csRaindrop. If the input number:
has 3 as a factor, add "Pling" to the result.
has 5 as a factor, add "Plang" to the result.
has 7 as a factor, add "Plong" to the result.
does not have any of 3, 5, or 7 as a factor, the result should be the digits of the input number.

Examples:
csRaindrops(28) -> "Plong"
28 has 7 as a factor, but not 3 or 5.
csRaindrops(30) -> "PlingPlang"
30 has both 3 and 5 as factors, but not 7.
csRaindrops(34) -> "34"
34 is not factored by 3, 5, or 7.
*********** CODE ***************

def csRaindrops(number):
    output_string = ""
    has_3_factor = output_string + "Pling"
    if number % 3 == 0:
        output_string += "Pling"
    elif number % 5 == 0:
        output_string += "Plang"
    elif number % 7 == 0:
        output_string += "Plong"
    elif output_string is "":
        output_string += str(number)
    return output_string

*********** CODE ***************

*********** CODE ***************



*********** CODE ***************

*********** CODE ***************



*********** CODE ***************

*********** CODE ***************



*********** CODE ***************
